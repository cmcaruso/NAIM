name: svm
framework: sklearn
model_type: tabular

model_tasks:
  - classification

label_types:
  - binary
  - discrete

set_params_function:
  _target_: CMC_utils.miscellaneous.do_nothing

init_params:
  _target_: sklearn.svm.SVC
  _convert_: all

  C: 1.0
  # Regularization parameter. The strength of the regularization is inversely proportional to C. Must be strictly positive. The penalty is a squared l2 penalty.
  # float, default=1.0

  kernel: rbf
  # Specifies the kernel type to be used in the algorithm. If none is given, ‘rbf’ will be used. If a callable is given it is used to pre-compute the kernel matrix from data matrices; that matrix should be an array of shape (n_samples, n_samples).
  # {‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’} or callable, default=’rbf’

  degree: 3
  # Degree of the polynomial kernel function (‘poly’). Must be non-negative. Ignored by all other kernels.
  # int, default=3

  gamma: scale
  # Kernel coefficient for ‘rbf’, ‘poly’ and ‘sigmoid’.
  # {‘scale’, ‘auto’} or float, default=’scale’
  # - if gamma='scale' (default) is passed then it uses 1 / (n_features * X.var()) as value of gamma,
  # - if ‘auto’, uses 1 / n_features
  # - if float, must be non-negative.

  coef0: 0.0
  # Independent term in kernel function. It is only significant in ‘poly’ and ‘sigmoid’.
  # float, default=0.0

  shrinking: True
  # Whether to use the shrinking heuristic. See the User Guide.
  # bool, default=True

  probability: True
  # Whether to enable probability estimates. This must be enabled prior to calling fit, will slow down that method as it internally uses 5-fold cross-validation, and predict_proba may be inconsistent with predict. Read more in the User Guide.
  # bool, default=False

  tol: 1e-3
  # Tolerance for stopping criterion.
  # float, default=1e-3

  cache_size: 200
  # Specify the size of the kernel cache (in MB).
  # float, default=200

  class_weight: balanced
  # Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y)).
  # dict or ‘balanced’, default=None

  verbose: ${verbose}
  # Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.
  # bool, default=False

  max_iter: -1
  # Hard limit on iterations within solver, or -1 for no limit.
  # int, default=-1

  decision_function_shape: ovr
  # Whether to return a one-vs-rest (‘ovr’) decision function of shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one (‘ovo’) decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2). However, note that internally, one-vs-one (‘ovo’) is always used as a multi-class strategy to train models; an ovr matrix is only constructed from the ovo matrix. The parameter is ignored for binary classification.
  # {‘ovo’, ‘ovr’}, default=’ovr’

  break_ties: False
  # If true, decision_function_shape='ovr', and number of classes > 2, predict will break ties according to the confidence values of decision_function; otherwise the first class among the tied classes is returned. Please note that breaking ties comes at a relatively high computational cost compared to a simple predict.
  # bool, default=False

  random_state: ${seed}
  # Controls the pseudo random number generation for shuffling the data for probability estimates. Ignored when probability is False. Pass an int for reproducible output across multiple function calls. See Glossary.
  # int, RandomState instance or None, default=None

fit_params: {}

train_function:
  _target_: CMC_utils.models.train_sklearn_model

test_function:
  _target_: CMC_utils.models.test_sklearn_model

save_function:
  _target_: CMC_utils.save_load.save_model

file_extension: pkl

load_function:
  _target_: CMC_utils.save_load.load_model