name: f1_score
init:
  _target_: CMC_utils.metrics.f1

  # labels:
  # The set of labels to include when average != 'binary', and their order if average is None. Labels present in the data can be excluded, for example to calculate a multiclass average ignoring a majority negative class, while labels not present in the data will result in 0 components in a macro average. For multilabel targets, labels are column indices. By default, all labels in y_true and y_pred are used in sorted order.
  # array-like, default=None

  pos_label: 1
  # The class to report if average='binary' and the data is binary. If the data are multiclass or multilabel, this will be ignored; setting labels=[pos_label] and average != 'binary' will report scores for that label only.
  # str or int, default=1

  average:
  # This parameter is required for multiclass/multilabel targets. If None, the scores for each class are returned. Otherwise, this determines the type of averaging performed on the data:
  # {‘micro’, ‘macro’, ‘samples’, ‘weighted’, ‘binary’} or None, default=’binary’
  # - 'binary':
  # Only report results for the class specified by pos_label. This is applicable only if targets (y_{true,pred}) are binary.
  # - 'micro':
  # Calculate metrics globally by counting the total true positives, false negatives and false positives.
  # - 'macro':
  # Calculate metrics for each label, and find their unweighted mean. This does not take label imbalance into account.
  # - 'weighted':
  # Calculate metrics for each label, and find their average weighted by support (the number of true instances for each label). This alters ‘macro’ to account for label imbalance; it can result in an F-score that is not between precision and recall.
  # - 'samples':
  # Calculate metrics for each instance, and find their average (only meaningful for multilabel classification where this differs from accuracy_score).

  sample_weight:
  # Sample weights.
  # array-like of shape (n_samples,), default=None

  zero_division: 0
  # Sets the value to return when there is a zero division, i.e. when all predictions and labels are negative. If set to “warn”, this acts as 0, but warnings are also raised.
  # “warn”, 0 or 1, default=”warn”

set_params_function:
  _target_: CMC_utils.miscellaneous.do_nothing
