method: knn
# Name of the method.

# missing_values:
# The placeholder for the missing values. All occurrences of missing_values will be imputed.
# For pandas’ dataframes with nullable integer dtypes with missing values, missing_values
# should be set to np.nan, since pd.NA will be converted to np.nan.


n_neighbors: 5
# Number of neighboring samples to use for imputation.
# Default = 5.

weights: uniform
# Weight function used in prediction. Possible values:
# - ‘uniform’ : uniform weights. All points in each neighborhood are weighted equally.
# - ‘distance’ : weight points by the inverse of their distance. in this case, closer neighbors of a query point will have a greater influence than neighbors which are further away.
# - 'callable : a user-defined function which accepts an array of distances, and returns an array of the same shape containing the weights.
# Default = 'uniform'.

metric: nan_euclidean
# Distance metric for searching neighbors. Possible values:
# - ‘nan_euclidean’
# -  callable : a user-defined function which conforms to the definition of _pairwise_callable(X, Y, metric, **kwds).
#               The function accepts two arrays, X and Y, and a missing_values keyword in kwds and returns a scalar distance value.
# Default = 'nan_euclidean'.

copy: True
# If True, a copy of X will be created. If False, imputation will be done in-place whenever possible.
# Default = True.

add_indicator: False
# If True, a MissingIndicator transform will stack onto the output of the imputer’s transform.
# This allows a predictive estimator to account for missingness despite imputation. If a feature
# has no missing values at fit/train time, the feature won’t appear on the missing indicator even
# if there are missing values at transform/test time.
# Default = False.

concat_mask: False
# A boolean value to indicate whether to concatenate the mask to the data or not.
# Default = False.